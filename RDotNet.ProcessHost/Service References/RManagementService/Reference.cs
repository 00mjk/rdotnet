//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RDotNet.ProcessHost.RManagementService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RManagementService.IRManagementService")]
    public interface IRManagementService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/GetRUser", ReplyAction="http://tempuri.org/IRManagementService/GetRUserResponse")]
        string GetRUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/GetRUser", ReplyAction="http://tempuri.org/IRManagementService/GetRUserResponse")]
        System.Threading.Tasks.Task<string> GetRUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/Start", ReplyAction="http://tempuri.org/IRManagementService/StartResponse")]
        void Start(RDotNet.Server.StartupParameter parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/Start", ReplyAction="http://tempuri.org/IRManagementService/StartResponse")]
        System.Threading.Tasks.Task StartAsync(RDotNet.Server.StartupParameter parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/Terminate", ReplyAction="http://tempuri.org/IRManagementService/TerminateResponse")]
        void Terminate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/Terminate", ReplyAction="http://tempuri.org/IRManagementService/TerminateResponse")]
        System.Threading.Tasks.Task TerminateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/IsStarted", ReplyAction="http://tempuri.org/IRManagementService/IsStartedResponse")]
        bool IsStarted();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/IsStarted", ReplyAction="http://tempuri.org/IRManagementService/IsStartedResponse")]
        System.Threading.Tasks.Task<bool> IsStartedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/IsAlive", ReplyAction="http://tempuri.org/IRManagementService/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/IsAlive", ReplyAction="http://tempuri.org/IRManagementService/IsAliveResponse")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/Poke", ReplyAction="http://tempuri.org/IRManagementService/PokeResponse")]
        bool Poke();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/Poke", ReplyAction="http://tempuri.org/IRManagementService/PokeResponse")]
        System.Threading.Tasks.Task<bool> PokeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/LastPoke", ReplyAction="http://tempuri.org/IRManagementService/LastPokeResponse")]
        System.TimeSpan LastPoke();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/LastPoke", ReplyAction="http://tempuri.org/IRManagementService/LastPokeResponse")]
        System.Threading.Tasks.Task<System.TimeSpan> LastPokeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/ForceGarbageCollection", ReplyAction="http://tempuri.org/IRManagementService/ForceGarbageCollectionResponse")]
        void ForceGarbageCollection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRManagementService/ForceGarbageCollection", ReplyAction="http://tempuri.org/IRManagementService/ForceGarbageCollectionResponse")]
        System.Threading.Tasks.Task ForceGarbageCollectionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRManagementServiceChannel : global::RDotNet.ProcessHost.RManagementService.IRManagementService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RManagementServiceClient : System.ServiceModel.ClientBase<global::RDotNet.ProcessHost.RManagementService.IRManagementService>, global::RDotNet.ProcessHost.RManagementService.IRManagementService {
        
        public RManagementServiceClient() {
        }
        
        public RManagementServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RManagementServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RManagementServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RManagementServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetRUser() {
            return base.Channel.GetRUser();
        }
        
        public System.Threading.Tasks.Task<string> GetRUserAsync() {
            return base.Channel.GetRUserAsync();
        }
        
        public void Start(RDotNet.Server.StartupParameter parameter) {
            base.Channel.Start(parameter);
        }
        
        public System.Threading.Tasks.Task StartAsync(RDotNet.Server.StartupParameter parameter) {
            return base.Channel.StartAsync(parameter);
        }
        
        public void Terminate() {
            base.Channel.Terminate();
        }
        
        public System.Threading.Tasks.Task TerminateAsync() {
            return base.Channel.TerminateAsync();
        }
        
        public bool IsStarted() {
            return base.Channel.IsStarted();
        }
        
        public System.Threading.Tasks.Task<bool> IsStartedAsync() {
            return base.Channel.IsStartedAsync();
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
        
        public bool Poke() {
            return base.Channel.Poke();
        }
        
        public System.Threading.Tasks.Task<bool> PokeAsync() {
            return base.Channel.PokeAsync();
        }
        
        public System.TimeSpan LastPoke() {
            return base.Channel.LastPoke();
        }
        
        public System.Threading.Tasks.Task<System.TimeSpan> LastPokeAsync() {
            return base.Channel.LastPokeAsync();
        }
        
        public void ForceGarbageCollection() {
            base.Channel.ForceGarbageCollection();
        }
        
        public System.Threading.Tasks.Task ForceGarbageCollectionAsync() {
            return base.Channel.ForceGarbageCollectionAsync();
        }
    }
}

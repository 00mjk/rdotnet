//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RDotNet.Client.RLanguageService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RLanguageService.IRLanguageService")]
    public interface IRLanguageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/PreserveObject", ReplyAction="http://tempuri.org/IRLanguageService/PreserveObjectResponse")]
        void PreserveObject(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/PreserveObject", ReplyAction="http://tempuri.org/IRLanguageService/PreserveObjectResponse")]
        System.Threading.Tasks.Task PreserveObjectAsync(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/ReleaseObject", ReplyAction="http://tempuri.org/IRLanguageService/ReleaseObjectResponse")]
        void ReleaseObject(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/ReleaseObject", ReplyAction="http://tempuri.org/IRLanguageService/ReleaseObjectResponse")]
        System.Threading.Tasks.Task ReleaseObjectAsync(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/Protect", ReplyAction="http://tempuri.org/IRLanguageService/ProtectResponse")]
        RDotNet.Server.SymbolicExpressionContext Protect(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/Protect", ReplyAction="http://tempuri.org/IRLanguageService/ProtectResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> ProtectAsync(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/Unprotect", ReplyAction="http://tempuri.org/IRLanguageService/UnprotectResponse")]
        void Unprotect(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/Unprotect", ReplyAction="http://tempuri.org/IRLanguageService/UnprotectResponse")]
        System.Threading.Tasks.Task UnprotectAsync(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/UnprotectPtr", ReplyAction="http://tempuri.org/IRLanguageService/UnprotectPtrResponse")]
        void UnprotectPtr(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/UnprotectPtr", ReplyAction="http://tempuri.org/IRLanguageService/UnprotectPtrResponse")]
        System.Threading.Tasks.Task UnprotectPtrAsync(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/Install", ReplyAction="http://tempuri.org/IRLanguageService/InstallResponse")]
        RDotNet.Server.SymbolicExpressionContext Install(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/Install", ReplyAction="http://tempuri.org/IRLanguageService/InstallResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> InstallAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/MakeString", ReplyAction="http://tempuri.org/IRLanguageService/MakeStringResponse")]
        RDotNet.Server.SymbolicExpressionContext MakeString(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/MakeString", ReplyAction="http://tempuri.org/IRLanguageService/MakeStringResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> MakeStringAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/MakeChar", ReplyAction="http://tempuri.org/IRLanguageService/MakeCharResponse")]
        RDotNet.Server.SymbolicExpressionContext MakeChar(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/MakeChar", ReplyAction="http://tempuri.org/IRLanguageService/MakeCharResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> MakeCharAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/AsCharacterFactor", ReplyAction="http://tempuri.org/IRLanguageService/AsCharacterFactorResponse")]
        RDotNet.Server.SymbolicExpressionContext AsCharacterFactor(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/AsCharacterFactor", ReplyAction="http://tempuri.org/IRLanguageService/AsCharacterFactorResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> AsCharacterFactorAsync(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/AllocateVector", ReplyAction="http://tempuri.org/IRLanguageService/AllocateVectorResponse")]
        RDotNet.Server.SymbolicExpressionContext AllocateVector(RDotNet.R.Adapter.SymbolicExpressionType type, int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/AllocateVector", ReplyAction="http://tempuri.org/IRLanguageService/AllocateVectorResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> AllocateVectorAsync(RDotNet.R.Adapter.SymbolicExpressionType type, int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/CoerceVector", ReplyAction="http://tempuri.org/IRLanguageService/CoerceVectorResponse")]
        RDotNet.Server.SymbolicExpressionContext CoerceVector(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.R.Adapter.SymbolicExpressionType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/CoerceVector", ReplyAction="http://tempuri.org/IRLanguageService/CoerceVectorResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> CoerceVectorAsync(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.R.Adapter.SymbolicExpressionType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsVector", ReplyAction="http://tempuri.org/IRLanguageService/IsVectorResponse")]
        bool IsVector(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsVector", ReplyAction="http://tempuri.org/IRLanguageService/IsVectorResponse")]
        System.Threading.Tasks.Task<bool> IsVectorAsync(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsFrame", ReplyAction="http://tempuri.org/IRLanguageService/IsFrameResponse")]
        bool IsFrame(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsFrame", ReplyAction="http://tempuri.org/IRLanguageService/IsFrameResponse")]
        System.Threading.Tasks.Task<bool> IsFrameAsync(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsS4", ReplyAction="http://tempuri.org/IRLanguageService/IsS4Response")]
        bool IsS4(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsS4", ReplyAction="http://tempuri.org/IRLanguageService/IsS4Response")]
        System.Threading.Tasks.Task<bool> IsS4Async(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetLength", ReplyAction="http://tempuri.org/IRLanguageService/GetLengthResponse")]
        int GetLength(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetLength", ReplyAction="http://tempuri.org/IRLanguageService/GetLengthResponse")]
        System.Threading.Tasks.Task<int> GetLengthAsync(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/AllocateMatrix", ReplyAction="http://tempuri.org/IRLanguageService/AllocateMatrixResponse")]
        RDotNet.Server.SymbolicExpressionContext AllocateMatrix(RDotNet.R.Adapter.SymbolicExpressionType type, int rowCount, int columnCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/AllocateMatrix", ReplyAction="http://tempuri.org/IRLanguageService/AllocateMatrixResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> AllocateMatrixAsync(RDotNet.R.Adapter.SymbolicExpressionType type, int rowCount, int columnCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsMatrix", ReplyAction="http://tempuri.org/IRLanguageService/IsMatrixResponse")]
        bool IsMatrix(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsMatrix", ReplyAction="http://tempuri.org/IRLanguageService/IsMatrixResponse")]
        System.Threading.Tasks.Task<bool> IsMatrixAsync(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/NumberOfRows", ReplyAction="http://tempuri.org/IRLanguageService/NumberOfRowsResponse")]
        int NumberOfRows(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/NumberOfRows", ReplyAction="http://tempuri.org/IRLanguageService/NumberOfRowsResponse")]
        System.Threading.Tasks.Task<int> NumberOfRowsAsync(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/NumberOfColumns", ReplyAction="http://tempuri.org/IRLanguageService/NumberOfColumnsResponse")]
        int NumberOfColumns(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/NumberOfColumns", ReplyAction="http://tempuri.org/IRLanguageService/NumberOfColumnsResponse")]
        System.Threading.Tasks.Task<int> NumberOfColumnsAsync(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/AllocateList", ReplyAction="http://tempuri.org/IRLanguageService/AllocateListResponse")]
        RDotNet.Server.SymbolicExpressionContext AllocateList(int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/AllocateList", ReplyAction="http://tempuri.org/IRLanguageService/AllocateListResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> AllocateListAsync(int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsList", ReplyAction="http://tempuri.org/IRLanguageService/IsListResponse")]
        bool IsList(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsList", ReplyAction="http://tempuri.org/IRLanguageService/IsListResponse")]
        System.Threading.Tasks.Task<bool> IsListAsync(RDotNet.Server.SymbolicExpressionContext sexp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/Evaluate", ReplyAction="http://tempuri.org/IRLanguageService/EvaluateResponse")]
        RDotNet.Server.SymbolicExpressionContext Evaluate(RDotNet.Server.SymbolicExpressionContext statement, RDotNet.Server.SymbolicExpressionContext environment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/Evaluate", ReplyAction="http://tempuri.org/IRLanguageService/EvaluateResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> EvaluateAsync(RDotNet.Server.SymbolicExpressionContext statement, RDotNet.Server.SymbolicExpressionContext environment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/TryEvaluate", ReplyAction="http://tempuri.org/IRLanguageService/TryEvaluateResponse")]
        global::RDotNet.Client.RLanguageService.TryEvaluateResponse TryEvaluate(global::RDotNet.Client.RLanguageService.TryEvaluateRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/TryEvaluate", ReplyAction="http://tempuri.org/IRLanguageService/TryEvaluateResponse")]
        System.Threading.Tasks.Task<global::RDotNet.Client.RLanguageService.TryEvaluateResponse> TryEvaluateAsync(global::RDotNet.Client.RLanguageService.TryEvaluateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/ParseVector", ReplyAction="http://tempuri.org/IRLanguageService/ParseVectorResponse")]
        global::RDotNet.Client.RLanguageService.ParseVectorResponse ParseVector(global::RDotNet.Client.RLanguageService.ParseVectorRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/ParseVector", ReplyAction="http://tempuri.org/IRLanguageService/ParseVectorResponse")]
        System.Threading.Tasks.Task<global::RDotNet.Client.RLanguageService.ParseVectorResponse> ParseVectorAsync(global::RDotNet.Client.RLanguageService.ParseVectorRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/FindVar", ReplyAction="http://tempuri.org/IRLanguageService/FindVarResponse")]
        RDotNet.Server.SymbolicExpressionContext FindVar(RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext environment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/FindVar", ReplyAction="http://tempuri.org/IRLanguageService/FindVarResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> FindVarAsync(RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext environment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetVar", ReplyAction="http://tempuri.org/IRLanguageService/SetVarResponse")]
        void SetVar(RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value, RDotNet.Server.SymbolicExpressionContext environment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetVar", ReplyAction="http://tempuri.org/IRLanguageService/SetVarResponse")]
        System.Threading.Tasks.Task SetVarAsync(RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value, RDotNet.Server.SymbolicExpressionContext environment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/DefineVar", ReplyAction="http://tempuri.org/IRLanguageService/DefineVarResponse")]
        void DefineVar(RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value, RDotNet.Server.SymbolicExpressionContext environment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/DefineVar", ReplyAction="http://tempuri.org/IRLanguageService/DefineVarResponse")]
        System.Threading.Tasks.Task DefineVarAsync(RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value, RDotNet.Server.SymbolicExpressionContext environment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetAttrib", ReplyAction="http://tempuri.org/IRLanguageService/GetAttribResponse")]
        RDotNet.Server.SymbolicExpressionContext GetAttrib(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetAttrib", ReplyAction="http://tempuri.org/IRLanguageService/GetAttribResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetAttribAsync(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetAttrib", ReplyAction="http://tempuri.org/IRLanguageService/SetAttribResponse")]
        RDotNet.Server.SymbolicExpressionContext SetAttrib(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetAttrib", ReplyAction="http://tempuri.org/IRLanguageService/SetAttribResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> SetAttribAsync(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/DoSlot", ReplyAction="http://tempuri.org/IRLanguageService/DoSlotResponse")]
        RDotNet.Server.SymbolicExpressionContext DoSlot(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/DoSlot", ReplyAction="http://tempuri.org/IRLanguageService/DoSlotResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> DoSlotAsync(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/DoSlotAssign", ReplyAction="http://tempuri.org/IRLanguageService/DoSlotAssignResponse")]
        RDotNet.Server.SymbolicExpressionContext DoSlotAssign(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/DoSlotAssign", ReplyAction="http://tempuri.org/IRLanguageService/DoSlotAssignResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> DoSlotAssignAsync(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetClassDefinition", ReplyAction="http://tempuri.org/IRLanguageService/GetClassDefinitionResponse")]
        RDotNet.Server.SymbolicExpressionContext GetClassDefinition(string what);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetClassDefinition", ReplyAction="http://tempuri.org/IRLanguageService/GetClassDefinitionResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetClassDefinitionAsync(string what);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/HasSlot", ReplyAction="http://tempuri.org/IRLanguageService/HasSlotResponse")]
        bool HasSlot(RDotNet.Server.SymbolicExpressionContext context, RDotNet.Server.SymbolicExpressionContext name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/HasSlot", ReplyAction="http://tempuri.org/IRLanguageService/HasSlotResponse")]
        System.Threading.Tasks.Task<bool> HasSlotAsync(RDotNet.Server.SymbolicExpressionContext context, RDotNet.Server.SymbolicExpressionContext name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsEnvironment", ReplyAction="http://tempuri.org/IRLanguageService/IsEnvironmentResponse")]
        bool IsEnvironment(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsEnvironment", ReplyAction="http://tempuri.org/IRLanguageService/IsEnvironmentResponse")]
        System.Threading.Tasks.Task<bool> IsEnvironmentAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsExpression", ReplyAction="http://tempuri.org/IRLanguageService/IsExpressionResponse")]
        bool IsExpression(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsExpression", ReplyAction="http://tempuri.org/IRLanguageService/IsExpressionResponse")]
        System.Threading.Tasks.Task<bool> IsExpressionAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsSymbol", ReplyAction="http://tempuri.org/IRLanguageService/IsSymbolResponse")]
        bool IsSymbol(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsSymbol", ReplyAction="http://tempuri.org/IRLanguageService/IsSymbolResponse")]
        System.Threading.Tasks.Task<bool> IsSymbolAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsLanguage", ReplyAction="http://tempuri.org/IRLanguageService/IsLanguageResponse")]
        bool IsLanguage(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsLanguage", ReplyAction="http://tempuri.org/IRLanguageService/IsLanguageResponse")]
        System.Threading.Tasks.Task<bool> IsLanguageAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsFunction", ReplyAction="http://tempuri.org/IRLanguageService/IsFunctionResponse")]
        bool IsFunction(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsFunction", ReplyAction="http://tempuri.org/IRLanguageService/IsFunctionResponse")]
        System.Threading.Tasks.Task<bool> IsFunctionAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsFactor", ReplyAction="http://tempuri.org/IRLanguageService/IsFactorResponse")]
        bool IsFactor(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsFactor", ReplyAction="http://tempuri.org/IRLanguageService/IsFactorResponse")]
        System.Threading.Tasks.Task<bool> IsFactorAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsOrdered", ReplyAction="http://tempuri.org/IRLanguageService/IsOrderedResponse")]
        bool IsOrdered(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsOrdered", ReplyAction="http://tempuri.org/IRLanguageService/IsOrderedResponse")]
        System.Threading.Tasks.Task<bool> IsOrderedAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/LsInternal", ReplyAction="http://tempuri.org/IRLanguageService/LsInternalResponse")]
        RDotNet.Server.SymbolicExpressionContext LsInternal(RDotNet.Server.SymbolicExpressionContext context, bool all);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/LsInternal", ReplyAction="http://tempuri.org/IRLanguageService/LsInternalResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> LsInternalAsync(RDotNet.Server.SymbolicExpressionContext context, bool all);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/ApplyClosure", ReplyAction="http://tempuri.org/IRLanguageService/ApplyClosureResponse")]
        RDotNet.Server.SymbolicExpressionContext ApplyClosure(RDotNet.Server.SymbolicExpressionContext call, RDotNet.Server.SymbolicExpressionContext value, RDotNet.Server.SymbolicExpressionContext arguments, RDotNet.Server.SymbolicExpressionContext environment, RDotNet.Server.SymbolicExpressionContext suppliedEnvironment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/ApplyClosure", ReplyAction="http://tempuri.org/IRLanguageService/ApplyClosureResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> ApplyClosureAsync(RDotNet.Server.SymbolicExpressionContext call, RDotNet.Server.SymbolicExpressionContext value, RDotNet.Server.SymbolicExpressionContext arguments, RDotNet.Server.SymbolicExpressionContext environment, RDotNet.Server.SymbolicExpressionContext suppliedEnvironment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/VectorToPairList", ReplyAction="http://tempuri.org/IRLanguageService/VectorToPairListResponse")]
        RDotNet.Server.SymbolicExpressionContext VectorToPairList(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/VectorToPairList", ReplyAction="http://tempuri.org/IRLanguageService/VectorToPairListResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> VectorToPairListAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/AllocateSEXP", ReplyAction="http://tempuri.org/IRLanguageService/AllocateSEXPResponse")]
        RDotNet.Server.SymbolicExpressionContext AllocateSEXP(RDotNet.R.Adapter.SymbolicExpressionType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/AllocateSEXP", ReplyAction="http://tempuri.org/IRLanguageService/AllocateSEXPResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> AllocateSEXPAsync(RDotNet.R.Adapter.SymbolicExpressionType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/NewEnvironment", ReplyAction="http://tempuri.org/IRLanguageService/NewEnvironmentResponse")]
        RDotNet.Server.SymbolicExpressionContext NewEnvironment(RDotNet.Server.SymbolicExpressionContext names, RDotNet.Server.SymbolicExpressionContext values, RDotNet.Server.SymbolicExpressionContext parent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/NewEnvironment", ReplyAction="http://tempuri.org/IRLanguageService/NewEnvironmentResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> NewEnvironmentAsync(RDotNet.Server.SymbolicExpressionContext names, RDotNet.Server.SymbolicExpressionContext values, RDotNet.Server.SymbolicExpressionContext parent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/Cons", ReplyAction="http://tempuri.org/IRLanguageService/ConsResponse")]
        RDotNet.Server.SymbolicExpressionContext Cons(RDotNet.Server.SymbolicExpressionContext context, RDotNet.Server.SymbolicExpressionContext next);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/Cons", ReplyAction="http://tempuri.org/IRLanguageService/ConsResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> ConsAsync(RDotNet.Server.SymbolicExpressionContext context, RDotNet.Server.SymbolicExpressionContext next);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/LCons", ReplyAction="http://tempuri.org/IRLanguageService/LConsResponse")]
        RDotNet.Server.SymbolicExpressionContext LCons(RDotNet.Server.SymbolicExpressionContext context, RDotNet.Server.SymbolicExpressionContext next);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/LCons", ReplyAction="http://tempuri.org/IRLanguageService/LConsResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> LConsAsync(RDotNet.Server.SymbolicExpressionContext context, RDotNet.Server.SymbolicExpressionContext next);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsNil", ReplyAction="http://tempuri.org/IRLanguageService/IsNilResponse")]
        bool IsNil(RDotNet.Server.SymbolicExpressionContext attribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsNil", ReplyAction="http://tempuri.org/IRLanguageService/IsNilResponse")]
        System.Threading.Tasks.Task<bool> IsNilAsync(RDotNet.Server.SymbolicExpressionContext attribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsNaString", ReplyAction="http://tempuri.org/IRLanguageService/IsNaStringResponse")]
        bool IsNaString(RDotNet.Server.SymbolicExpressionContext rstring);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsNaString", ReplyAction="http://tempuri.org/IRLanguageService/IsNaStringResponse")]
        System.Threading.Tasks.Task<bool> IsNaStringAsync(RDotNet.Server.SymbolicExpressionContext rstring);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetParseError", ReplyAction="http://tempuri.org/IRLanguageService/GetParseErrorResponse")]
        string GetParseError();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetParseError", ReplyAction="http://tempuri.org/IRLanguageService/GetParseErrorResponse")]
        System.Threading.Tasks.Task<string> GetParseErrorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetGlobalEnvironment", ReplyAction="http://tempuri.org/IRLanguageService/GetGlobalEnvironmentResponse")]
        RDotNet.Server.SymbolicExpressionContext GetGlobalEnvironment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetGlobalEnvironment", ReplyAction="http://tempuri.org/IRLanguageService/GetGlobalEnvironmentResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetGlobalEnvironmentAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetNames", ReplyAction="http://tempuri.org/IRLanguageService/GetNamesResponse")]
        RDotNet.Server.SymbolicExpressionContext GetNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetNames", ReplyAction="http://tempuri.org/IRLanguageService/GetNamesResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetCharacterVectorValues", ReplyAction="http://tempuri.org/IRLanguageService/GetCharacterVectorValuesResponse")]
        System.Collections.Generic.List<string> GetCharacterVectorValues(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetCharacterVectorValues", ReplyAction="http://tempuri.org/IRLanguageService/GetCharacterVectorValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetCharacterVectorValuesAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetExpressionVectorValues", ReplyAction="http://tempuri.org/IRLanguageService/GetExpressionVectorValuesResponse")]
        System.Collections.Generic.List<RDotNet.Server.SymbolicExpressionContext> GetExpressionVectorValues(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetExpressionVectorValues", ReplyAction="http://tempuri.org/IRLanguageService/GetExpressionVectorValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RDotNet.Server.SymbolicExpressionContext>> GetExpressionVectorValuesAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetIntegerVectorValues", ReplyAction="http://tempuri.org/IRLanguageService/GetIntegerVectorValuesResponse")]
        System.Collections.Generic.List<int> GetIntegerVectorValues(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetIntegerVectorValues", ReplyAction="http://tempuri.org/IRLanguageService/GetIntegerVectorValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetIntegerVectorValuesAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetNumericVectorValues", ReplyAction="http://tempuri.org/IRLanguageService/GetNumericVectorValuesResponse")]
        System.Collections.Generic.List<double> GetNumericVectorValues(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetNumericVectorValues", ReplyAction="http://tempuri.org/IRLanguageService/GetNumericVectorValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<double>> GetNumericVectorValuesAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetLogicalVectorValues", ReplyAction="http://tempuri.org/IRLanguageService/GetLogicalVectorValuesResponse")]
        System.Collections.Generic.List<bool> GetLogicalVectorValues(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetLogicalVectorValues", ReplyAction="http://tempuri.org/IRLanguageService/GetLogicalVectorValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<bool>> GetLogicalVectorValuesAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetRawVectorValues", ReplyAction="http://tempuri.org/IRLanguageService/GetRawVectorValuesResponse")]
        System.Collections.Generic.List<byte> GetRawVectorValues(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetRawVectorValues", ReplyAction="http://tempuri.org/IRLanguageService/GetRawVectorValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<byte>> GetRawVectorValuesAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetComplexVectorValues", ReplyAction="http://tempuri.org/IRLanguageService/GetComplexVectorValuesResponse")]
        System.Collections.Generic.List<System.Numerics.Complex> GetComplexVectorValues(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetComplexVectorValues", ReplyAction="http://tempuri.org/IRLanguageService/GetComplexVectorValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Numerics.Complex>> GetComplexVectorValuesAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetCharacterVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetCharacterVectorValueAtResponse")]
        string GetCharacterVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetCharacterVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetCharacterVectorValueAtResponse")]
        System.Threading.Tasks.Task<string> GetCharacterVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetCharacterVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetCharacterVectorValueAtResponse")]
        void SetCharacterVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetCharacterVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetCharacterVectorValueAtResponse")]
        System.Threading.Tasks.Task SetCharacterVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetExpressionVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetExpressionVectorValueAtResponse")]
        RDotNet.Server.SymbolicExpressionContext GetExpressionVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetExpressionVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetExpressionVectorValueAtResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetExpressionVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetExpressionVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetExpressionVectorValueAtResponse")]
        void SetExpressionVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index, RDotNet.Server.SymbolicExpressionContext value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetExpressionVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetExpressionVectorValueAtResponse")]
        System.Threading.Tasks.Task SetExpressionVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index, RDotNet.Server.SymbolicExpressionContext value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetIntegerVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetIntegerVectorValueAtResponse")]
        int GetIntegerVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetIntegerVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetIntegerVectorValueAtResponse")]
        System.Threading.Tasks.Task<int> GetIntegerVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetIntegerVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetIntegerVectorValueAtResponse")]
        void SetIntegerVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index, int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetIntegerVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetIntegerVectorValueAtResponse")]
        System.Threading.Tasks.Task SetIntegerVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index, int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetNumericVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetNumericVectorValueAtResponse")]
        double GetNumericVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetNumericVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetNumericVectorValueAtResponse")]
        System.Threading.Tasks.Task<double> GetNumericVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetNumericVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetNumericVectorValueAtResponse")]
        void SetNumericVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetNumericVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetNumericVectorValueAtResponse")]
        System.Threading.Tasks.Task SetNumericVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetLogicalVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetLogicalVectorValueAtResponse")]
        bool GetLogicalVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetLogicalVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetLogicalVectorValueAtResponse")]
        System.Threading.Tasks.Task<bool> GetLogicalVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetLogicalVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetLogicalVectorValueAtResponse")]
        void SetLogicalVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index, bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetLogicalVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetLogicalVectorValueAtResponse")]
        System.Threading.Tasks.Task SetLogicalVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index, bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetRawVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetRawVectorValueAtResponse")]
        byte GetRawVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetRawVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetRawVectorValueAtResponse")]
        System.Threading.Tasks.Task<byte> GetRawVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetRawVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetRawVectorValueAtResponse")]
        void SetRawVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index, byte value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetRawVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetRawVectorValueAtResponse")]
        System.Threading.Tasks.Task SetRawVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index, byte value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetComplexVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetComplexVectorValueAtResponse")]
        System.Numerics.Complex GetComplexVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetComplexVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetComplexVectorValueAtResponse")]
        System.Threading.Tasks.Task<System.Numerics.Complex> GetComplexVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetComplexVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetComplexVectorValueAtResponse")]
        void SetComplexVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index, System.Numerics.Complex value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetComplexVectorValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetComplexVectorValueAtResponse")]
        System.Threading.Tasks.Task SetComplexVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index, System.Numerics.Complex value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeCharacterVector", ReplyAction="http://tempuri.org/IRLanguageService/InitializeCharacterVectorResponse")]
        void InitializeCharacterVector(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<string> vector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeCharacterVector", ReplyAction="http://tempuri.org/IRLanguageService/InitializeCharacterVectorResponse")]
        System.Threading.Tasks.Task InitializeCharacterVectorAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<string> vector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeIntegerVector", ReplyAction="http://tempuri.org/IRLanguageService/InitializeIntegerVectorResponse")]
        void InitializeIntegerVector(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<int> vector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeIntegerVector", ReplyAction="http://tempuri.org/IRLanguageService/InitializeIntegerVectorResponse")]
        System.Threading.Tasks.Task InitializeIntegerVectorAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<int> vector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeNumericVector", ReplyAction="http://tempuri.org/IRLanguageService/InitializeNumericVectorResponse")]
        void InitializeNumericVector(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<double> vector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeNumericVector", ReplyAction="http://tempuri.org/IRLanguageService/InitializeNumericVectorResponse")]
        System.Threading.Tasks.Task InitializeNumericVectorAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<double> vector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeLogicalVector", ReplyAction="http://tempuri.org/IRLanguageService/InitializeLogicalVectorResponse")]
        void InitializeLogicalVector(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<bool> vector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeLogicalVector", ReplyAction="http://tempuri.org/IRLanguageService/InitializeLogicalVectorResponse")]
        System.Threading.Tasks.Task InitializeLogicalVectorAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<bool> vector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeRawVector", ReplyAction="http://tempuri.org/IRLanguageService/InitializeRawVectorResponse")]
        void InitializeRawVector(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<byte> vector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeRawVector", ReplyAction="http://tempuri.org/IRLanguageService/InitializeRawVectorResponse")]
        System.Threading.Tasks.Task InitializeRawVectorAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<byte> vector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeComplexVector", ReplyAction="http://tempuri.org/IRLanguageService/InitializeComplexVectorResponse")]
        void InitializeComplexVector(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Numerics.Complex> vector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeComplexVector", ReplyAction="http://tempuri.org/IRLanguageService/InitializeComplexVectorResponse")]
        System.Threading.Tasks.Task InitializeComplexVectorAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Numerics.Complex> vector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetSymbols", ReplyAction="http://tempuri.org/IRLanguageService/GetSymbolsResponse")]
        System.Collections.Generic.List<RDotNet.Server.SymbolicExpressionContext> GetSymbols(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetSymbols", ReplyAction="http://tempuri.org/IRLanguageService/GetSymbolsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<RDotNet.Server.SymbolicExpressionContext>> GetSymbolsAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetUnboundValue", ReplyAction="http://tempuri.org/IRLanguageService/GetUnboundValueResponse")]
        RDotNet.Server.SymbolicExpressionContext GetUnboundValue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetUnboundValue", ReplyAction="http://tempuri.org/IRLanguageService/GetUnboundValueResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetUnboundValueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetNilValue", ReplyAction="http://tempuri.org/IRLanguageService/GetNilValueResponse")]
        RDotNet.Server.SymbolicExpressionContext GetNilValue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetNilValue", ReplyAction="http://tempuri.org/IRLanguageService/GetNilValueResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetNilValueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetAttributeNames", ReplyAction="http://tempuri.org/IRLanguageService/GetAttributeNamesResponse")]
        System.Collections.Generic.List<string> GetAttributeNames(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetAttributeNames", ReplyAction="http://tempuri.org/IRLanguageService/GetAttributeNamesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAttributeNamesAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetPrintName", ReplyAction="http://tempuri.org/IRLanguageService/GetPrintNameResponse")]
        string GetPrintName(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetPrintName", ReplyAction="http://tempuri.org/IRLanguageService/GetPrintNameResponse")]
        System.Threading.Tasks.Task<string> GetPrintNameAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetPrintName", ReplyAction="http://tempuri.org/IRLanguageService/SetPrintNameResponse")]
        void SetPrintName(RDotNet.Server.SymbolicExpressionContext context, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetPrintName", ReplyAction="http://tempuri.org/IRLanguageService/SetPrintNameResponse")]
        System.Threading.Tasks.Task SetPrintNameAsync(RDotNet.Server.SymbolicExpressionContext context, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetDimNames", ReplyAction="http://tempuri.org/IRLanguageService/GetDimNamesResponse")]
        RDotNet.Server.SymbolicExpressionContext GetDimNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetDimNames", ReplyAction="http://tempuri.org/IRLanguageService/GetDimNamesResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetDimNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsPromise", ReplyAction="http://tempuri.org/IRLanguageService/IsPromiseResponse")]
        bool IsPromise(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/IsPromise", ReplyAction="http://tempuri.org/IRLanguageService/IsPromiseResponse")]
        System.Threading.Tasks.Task<bool> IsPromiseAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetClosureBody", ReplyAction="http://tempuri.org/IRLanguageService/GetClosureBodyResponse")]
        RDotNet.Server.SymbolicExpressionContext GetClosureBody(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetClosureBody", ReplyAction="http://tempuri.org/IRLanguageService/GetClosureBodyResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetClosureBodyAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetClosureFormals", ReplyAction="http://tempuri.org/IRLanguageService/GetClosureFormalsResponse")]
        RDotNet.Server.SymbolicExpressionContext GetClosureFormals(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetClosureFormals", ReplyAction="http://tempuri.org/IRLanguageService/GetClosureFormalsResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetClosureFormalsAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetClosureEnvironment", ReplyAction="http://tempuri.org/IRLanguageService/GetClosureEnvironmentResponse")]
        RDotNet.Server.SymbolicExpressionContext GetClosureEnvironment(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetClosureEnvironment", ReplyAction="http://tempuri.org/IRLanguageService/GetClosureEnvironmentResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetClosureEnvironmentAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetLanguageList", ReplyAction="http://tempuri.org/IRLanguageService/GetLanguageListResponse")]
        RDotNet.Server.SymbolicExpressionContext GetLanguageList(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetLanguageList", ReplyAction="http://tempuri.org/IRLanguageService/GetLanguageListResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetLanguageListAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetClass", ReplyAction="http://tempuri.org/IRLanguageService/GetClassResponse")]
        RDotNet.Server.SymbolicExpressionContext GetClass(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetClass", ReplyAction="http://tempuri.org/IRLanguageService/GetClassResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetClassAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetInternal", ReplyAction="http://tempuri.org/IRLanguageService/GetInternalResponse")]
        RDotNet.Server.SymbolicExpressionContext GetInternal(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetInternal", ReplyAction="http://tempuri.org/IRLanguageService/GetInternalResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetInternalAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetValue", ReplyAction="http://tempuri.org/IRLanguageService/GetValueResponse")]
        RDotNet.Server.SymbolicExpressionContext GetValue(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetValue", ReplyAction="http://tempuri.org/IRLanguageService/GetValueResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetValueAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetLevels", ReplyAction="http://tempuri.org/IRLanguageService/GetLevelsResponse")]
        RDotNet.Server.SymbolicExpressionContext GetLevels(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetLevels", ReplyAction="http://tempuri.org/IRLanguageService/GetLevelsResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetLevelsAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetNumericMatrixValues", ReplyAction="http://tempuri.org/IRLanguageService/GetNumericMatrixValuesResponse")]
        System.Collections.Generic.List<System.Collections.Generic.List<double>> GetNumericMatrixValues(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetNumericMatrixValues", ReplyAction="http://tempuri.org/IRLanguageService/GetNumericMatrixValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<double>>> GetNumericMatrixValuesAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetIntegerMatrixValues", ReplyAction="http://tempuri.org/IRLanguageService/GetIntegerMatrixValuesResponse")]
        System.Collections.Generic.List<System.Collections.Generic.List<int>> GetIntegerMatrixValues(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetIntegerMatrixValues", ReplyAction="http://tempuri.org/IRLanguageService/GetIntegerMatrixValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<int>>> GetIntegerMatrixValuesAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetCharacterMatrixValues", ReplyAction="http://tempuri.org/IRLanguageService/GetCharacterMatrixValuesResponse")]
        System.Collections.Generic.List<System.Collections.Generic.List<string>> GetCharacterMatrixValues(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetCharacterMatrixValues", ReplyAction="http://tempuri.org/IRLanguageService/GetCharacterMatrixValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<string>>> GetCharacterMatrixValuesAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetLogicalMatrixValues", ReplyAction="http://tempuri.org/IRLanguageService/GetLogicalMatrixValuesResponse")]
        System.Collections.Generic.List<System.Collections.Generic.List<bool>> GetLogicalMatrixValues(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetLogicalMatrixValues", ReplyAction="http://tempuri.org/IRLanguageService/GetLogicalMatrixValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<bool>>> GetLogicalMatrixValuesAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetRawMatrixValues", ReplyAction="http://tempuri.org/IRLanguageService/GetRawMatrixValuesResponse")]
        System.Collections.Generic.List<System.Collections.Generic.List<byte>> GetRawMatrixValues(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetRawMatrixValues", ReplyAction="http://tempuri.org/IRLanguageService/GetRawMatrixValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<byte>>> GetRawMatrixValuesAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetComplexMatrixValues", ReplyAction="http://tempuri.org/IRLanguageService/GetComplexMatrixValuesResponse")]
        System.Collections.Generic.List<System.Collections.Generic.List<System.Numerics.Complex>> GetComplexMatrixValues(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetComplexMatrixValues", ReplyAction="http://tempuri.org/IRLanguageService/GetComplexMatrixValuesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<System.Numerics.Complex>>> GetComplexMatrixValuesAsync(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetCharacterMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetCharacterMatrixValueAtResponse")]
        string GetCharacterMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetCharacterMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetCharacterMatrixValueAtResponse")]
        System.Threading.Tasks.Task<string> GetCharacterMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetCharacterMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetCharacterMatrixValueAtResponse")]
        void SetCharacterMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetCharacterMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetCharacterMatrixValueAtResponse")]
        System.Threading.Tasks.Task SetCharacterMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetIntegerMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetIntegerMatrixValueAtResponse")]
        int GetIntegerMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetIntegerMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetIntegerMatrixValueAtResponse")]
        System.Threading.Tasks.Task<int> GetIntegerMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetIntegerMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetIntegerMatrixValueAtResponse")]
        void SetIntegerMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column, int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetIntegerMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetIntegerMatrixValueAtResponse")]
        System.Threading.Tasks.Task SetIntegerMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column, int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetNumericMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetNumericMatrixValueAtResponse")]
        double GetNumericMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetNumericMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetNumericMatrixValueAtResponse")]
        System.Threading.Tasks.Task<double> GetNumericMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetNumericMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetNumericMatrixValueAtResponse")]
        void SetNumericMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetNumericMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetNumericMatrixValueAtResponse")]
        System.Threading.Tasks.Task SetNumericMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetLogicalMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetLogicalMatrixValueAtResponse")]
        bool GetLogicalMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetLogicalMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetLogicalMatrixValueAtResponse")]
        System.Threading.Tasks.Task<bool> GetLogicalMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetLogicalMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetLogicalMatrixValueAtResponse")]
        void SetLogicalMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column, bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetLogicalMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetLogicalMatrixValueAtResponse")]
        System.Threading.Tasks.Task SetLogicalMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column, bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetRawMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetRawMatrixValueAtResponse")]
        byte GetRawMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetRawMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetRawMatrixValueAtResponse")]
        System.Threading.Tasks.Task<byte> GetRawMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetRawMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetRawMatrixValueAtResponse")]
        void SetRawMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column, byte value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetRawMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetRawMatrixValueAtResponse")]
        System.Threading.Tasks.Task SetRawMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column, byte value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetComplexMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetComplexMatrixValueAtResponse")]
        System.Numerics.Complex GetComplexMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetComplexMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/GetComplexMatrixValueAtResponse")]
        System.Threading.Tasks.Task<System.Numerics.Complex> GetComplexMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetComplexMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetComplexMatrixValueAtResponse")]
        void SetComplexMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column, System.Numerics.Complex value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/SetComplexMatrixValueAt", ReplyAction="http://tempuri.org/IRLanguageService/SetComplexMatrixValueAtResponse")]
        System.Threading.Tasks.Task SetComplexMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column, System.Numerics.Complex value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeCharacterMatrix", ReplyAction="http://tempuri.org/IRLanguageService/InitializeCharacterMatrixResponse")]
        void InitializeCharacterMatrix(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<string>> matrix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeCharacterMatrix", ReplyAction="http://tempuri.org/IRLanguageService/InitializeCharacterMatrixResponse")]
        System.Threading.Tasks.Task InitializeCharacterMatrixAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<string>> matrix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeIntegerMatrix", ReplyAction="http://tempuri.org/IRLanguageService/InitializeIntegerMatrixResponse")]
        void InitializeIntegerMatrix(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<int>> matrix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeIntegerMatrix", ReplyAction="http://tempuri.org/IRLanguageService/InitializeIntegerMatrixResponse")]
        System.Threading.Tasks.Task InitializeIntegerMatrixAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<int>> matrix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeNumericMatrix", ReplyAction="http://tempuri.org/IRLanguageService/InitializeNumericMatrixResponse")]
        void InitializeNumericMatrix(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<double>> matrix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeNumericMatrix", ReplyAction="http://tempuri.org/IRLanguageService/InitializeNumericMatrixResponse")]
        System.Threading.Tasks.Task InitializeNumericMatrixAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<double>> matrix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeLogicalMatrix", ReplyAction="http://tempuri.org/IRLanguageService/InitializeLogicalMatrixResponse")]
        void InitializeLogicalMatrix(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<bool>> matrix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeLogicalMatrix", ReplyAction="http://tempuri.org/IRLanguageService/InitializeLogicalMatrixResponse")]
        System.Threading.Tasks.Task InitializeLogicalMatrixAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<bool>> matrix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeRawMatrix", ReplyAction="http://tempuri.org/IRLanguageService/InitializeRawMatrixResponse")]
        void InitializeRawMatrix(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<byte>> matrix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeRawMatrix", ReplyAction="http://tempuri.org/IRLanguageService/InitializeRawMatrixResponse")]
        System.Threading.Tasks.Task InitializeRawMatrixAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<byte>> matrix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeComplexMatrix", ReplyAction="http://tempuri.org/IRLanguageService/InitializeComplexMatrixResponse")]
        void InitializeComplexMatrix(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<System.Numerics.Complex>> matrix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/InitializeComplexMatrix", ReplyAction="http://tempuri.org/IRLanguageService/InitializeComplexMatrixResponse")]
        System.Threading.Tasks.Task InitializeComplexMatrixAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<System.Numerics.Complex>> matrix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetParentEnvironment", ReplyAction="http://tempuri.org/IRLanguageService/GetParentEnvironmentResponse")]
        RDotNet.Server.SymbolicExpressionContext GetParentEnvironment(RDotNet.Server.SymbolicExpressionContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRLanguageService/GetParentEnvironment", ReplyAction="http://tempuri.org/IRLanguageService/GetParentEnvironmentResponse")]
        System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetParentEnvironmentAsync(RDotNet.Server.SymbolicExpressionContext context);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TryEvaluate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class TryEvaluateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public RDotNet.Server.SymbolicExpressionContext statement;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public RDotNet.Server.SymbolicExpressionContext environment;
        
        public TryEvaluateRequest() {
        }
        
        public TryEvaluateRequest(RDotNet.Server.SymbolicExpressionContext statement, RDotNet.Server.SymbolicExpressionContext environment) {
            this.statement = statement;
            this.environment = environment;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TryEvaluateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class TryEvaluateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public RDotNet.Server.SymbolicExpressionContext TryEvaluateResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool errorOccurred;
        
        public TryEvaluateResponse() {
        }
        
        public TryEvaluateResponse(RDotNet.Server.SymbolicExpressionContext TryEvaluateResult, bool errorOccurred) {
            this.TryEvaluateResult = TryEvaluateResult;
            this.errorOccurred = errorOccurred;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ParseVector", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ParseVectorRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public RDotNet.Server.SymbolicExpressionContext statement;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int statementCount;
        
        public ParseVectorRequest() {
        }
        
        public ParseVectorRequest(RDotNet.Server.SymbolicExpressionContext statement, int statementCount) {
            this.statement = statement;
            this.statementCount = statementCount;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ParseVectorResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ParseVectorResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public RDotNet.Server.SymbolicExpressionContext ParseVectorResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public RDotNet.R.Adapter.ParseStatus status;
        
        public ParseVectorResponse() {
        }
        
        public ParseVectorResponse(RDotNet.Server.SymbolicExpressionContext ParseVectorResult, RDotNet.R.Adapter.ParseStatus status) {
            this.ParseVectorResult = ParseVectorResult;
            this.status = status;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRLanguageServiceChannel : global::RDotNet.Client.RLanguageService.IRLanguageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RLanguageServiceClient : System.ServiceModel.ClientBase<global::RDotNet.Client.RLanguageService.IRLanguageService>, global::RDotNet.Client.RLanguageService.IRLanguageService {
        
        public RLanguageServiceClient() {
        }
        
        public RLanguageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RLanguageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RLanguageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RLanguageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void PreserveObject(RDotNet.Server.SymbolicExpressionContext sexp) {
            base.Channel.PreserveObject(sexp);
        }
        
        public System.Threading.Tasks.Task PreserveObjectAsync(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.PreserveObjectAsync(sexp);
        }
        
        public void ReleaseObject(RDotNet.Server.SymbolicExpressionContext sexp) {
            base.Channel.ReleaseObject(sexp);
        }
        
        public System.Threading.Tasks.Task ReleaseObjectAsync(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.ReleaseObjectAsync(sexp);
        }
        
        public RDotNet.Server.SymbolicExpressionContext Protect(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.Protect(sexp);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> ProtectAsync(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.ProtectAsync(sexp);
        }
        
        public void Unprotect(int count) {
            base.Channel.Unprotect(count);
        }
        
        public System.Threading.Tasks.Task UnprotectAsync(int count) {
            return base.Channel.UnprotectAsync(count);
        }
        
        public void UnprotectPtr(RDotNet.Server.SymbolicExpressionContext sexp) {
            base.Channel.UnprotectPtr(sexp);
        }
        
        public System.Threading.Tasks.Task UnprotectPtrAsync(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.UnprotectPtrAsync(sexp);
        }
        
        public RDotNet.Server.SymbolicExpressionContext Install(string s) {
            return base.Channel.Install(s);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> InstallAsync(string s) {
            return base.Channel.InstallAsync(s);
        }
        
        public RDotNet.Server.SymbolicExpressionContext MakeString(string s) {
            return base.Channel.MakeString(s);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> MakeStringAsync(string s) {
            return base.Channel.MakeStringAsync(s);
        }
        
        public RDotNet.Server.SymbolicExpressionContext MakeChar(string s) {
            return base.Channel.MakeChar(s);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> MakeCharAsync(string s) {
            return base.Channel.MakeCharAsync(s);
        }
        
        public RDotNet.Server.SymbolicExpressionContext AsCharacterFactor(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.AsCharacterFactor(sexp);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> AsCharacterFactorAsync(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.AsCharacterFactorAsync(sexp);
        }
        
        public RDotNet.Server.SymbolicExpressionContext AllocateVector(RDotNet.R.Adapter.SymbolicExpressionType type, int length) {
            return base.Channel.AllocateVector(type, length);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> AllocateVectorAsync(RDotNet.R.Adapter.SymbolicExpressionType type, int length) {
            return base.Channel.AllocateVectorAsync(type, length);
        }
        
        public RDotNet.Server.SymbolicExpressionContext CoerceVector(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.R.Adapter.SymbolicExpressionType type) {
            return base.Channel.CoerceVector(sexp, type);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> CoerceVectorAsync(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.R.Adapter.SymbolicExpressionType type) {
            return base.Channel.CoerceVectorAsync(sexp, type);
        }
        
        public bool IsVector(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.IsVector(sexp);
        }
        
        public System.Threading.Tasks.Task<bool> IsVectorAsync(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.IsVectorAsync(sexp);
        }
        
        public bool IsFrame(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.IsFrame(sexp);
        }
        
        public System.Threading.Tasks.Task<bool> IsFrameAsync(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.IsFrameAsync(sexp);
        }
        
        public bool IsS4(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.IsS4(sexp);
        }
        
        public System.Threading.Tasks.Task<bool> IsS4Async(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.IsS4Async(sexp);
        }
        
        public int GetLength(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.GetLength(sexp);
        }
        
        public System.Threading.Tasks.Task<int> GetLengthAsync(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.GetLengthAsync(sexp);
        }
        
        public RDotNet.Server.SymbolicExpressionContext AllocateMatrix(RDotNet.R.Adapter.SymbolicExpressionType type, int rowCount, int columnCount) {
            return base.Channel.AllocateMatrix(type, rowCount, columnCount);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> AllocateMatrixAsync(RDotNet.R.Adapter.SymbolicExpressionType type, int rowCount, int columnCount) {
            return base.Channel.AllocateMatrixAsync(type, rowCount, columnCount);
        }
        
        public bool IsMatrix(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.IsMatrix(sexp);
        }
        
        public System.Threading.Tasks.Task<bool> IsMatrixAsync(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.IsMatrixAsync(sexp);
        }
        
        public int NumberOfRows(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.NumberOfRows(sexp);
        }
        
        public System.Threading.Tasks.Task<int> NumberOfRowsAsync(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.NumberOfRowsAsync(sexp);
        }
        
        public int NumberOfColumns(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.NumberOfColumns(sexp);
        }
        
        public System.Threading.Tasks.Task<int> NumberOfColumnsAsync(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.NumberOfColumnsAsync(sexp);
        }
        
        public RDotNet.Server.SymbolicExpressionContext AllocateList(int length) {
            return base.Channel.AllocateList(length);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> AllocateListAsync(int length) {
            return base.Channel.AllocateListAsync(length);
        }
        
        public bool IsList(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.IsList(sexp);
        }
        
        public System.Threading.Tasks.Task<bool> IsListAsync(RDotNet.Server.SymbolicExpressionContext sexp) {
            return base.Channel.IsListAsync(sexp);
        }
        
        public RDotNet.Server.SymbolicExpressionContext Evaluate(RDotNet.Server.SymbolicExpressionContext statement, RDotNet.Server.SymbolicExpressionContext environment) {
            return base.Channel.Evaluate(statement, environment);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> EvaluateAsync(RDotNet.Server.SymbolicExpressionContext statement, RDotNet.Server.SymbolicExpressionContext environment) {
            return base.Channel.EvaluateAsync(statement, environment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        global::RDotNet.Client.RLanguageService.TryEvaluateResponse global::RDotNet.Client.RLanguageService.IRLanguageService.TryEvaluate(global::RDotNet.Client.RLanguageService.TryEvaluateRequest request) {
            return base.Channel.TryEvaluate(request);
        }
        
        public RDotNet.Server.SymbolicExpressionContext TryEvaluate(RDotNet.Server.SymbolicExpressionContext statement, RDotNet.Server.SymbolicExpressionContext environment, out bool errorOccurred) {
            global::RDotNet.Client.RLanguageService.TryEvaluateRequest inValue = new global::RDotNet.Client.RLanguageService.TryEvaluateRequest();
            inValue.statement = statement;
            inValue.environment = environment;
            global::RDotNet.Client.RLanguageService.TryEvaluateResponse retVal = ((global::RDotNet.Client.RLanguageService.IRLanguageService)(this)).TryEvaluate(inValue);
            errorOccurred = retVal.errorOccurred;
            return retVal.TryEvaluateResult;
        }
        
        public System.Threading.Tasks.Task<global::RDotNet.Client.RLanguageService.TryEvaluateResponse> TryEvaluateAsync(global::RDotNet.Client.RLanguageService.TryEvaluateRequest request) {
            return base.Channel.TryEvaluateAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        global::RDotNet.Client.RLanguageService.ParseVectorResponse global::RDotNet.Client.RLanguageService.IRLanguageService.ParseVector(global::RDotNet.Client.RLanguageService.ParseVectorRequest request) {
            return base.Channel.ParseVector(request);
        }
        
        public RDotNet.Server.SymbolicExpressionContext ParseVector(RDotNet.Server.SymbolicExpressionContext statement, int statementCount, out RDotNet.R.Adapter.ParseStatus status) {
            global::RDotNet.Client.RLanguageService.ParseVectorRequest inValue = new global::RDotNet.Client.RLanguageService.ParseVectorRequest();
            inValue.statement = statement;
            inValue.statementCount = statementCount;
            global::RDotNet.Client.RLanguageService.ParseVectorResponse retVal = ((global::RDotNet.Client.RLanguageService.IRLanguageService)(this)).ParseVector(inValue);
            status = retVal.status;
            return retVal.ParseVectorResult;
        }
        
        public System.Threading.Tasks.Task<global::RDotNet.Client.RLanguageService.ParseVectorResponse> ParseVectorAsync(global::RDotNet.Client.RLanguageService.ParseVectorRequest request) {
            return base.Channel.ParseVectorAsync(request);
        }
        
        public RDotNet.Server.SymbolicExpressionContext FindVar(RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext environment) {
            return base.Channel.FindVar(name, environment);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> FindVarAsync(RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext environment) {
            return base.Channel.FindVarAsync(name, environment);
        }
        
        public void SetVar(RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value, RDotNet.Server.SymbolicExpressionContext environment) {
            base.Channel.SetVar(name, value, environment);
        }
        
        public System.Threading.Tasks.Task SetVarAsync(RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value, RDotNet.Server.SymbolicExpressionContext environment) {
            return base.Channel.SetVarAsync(name, value, environment);
        }
        
        public void DefineVar(RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value, RDotNet.Server.SymbolicExpressionContext environment) {
            base.Channel.DefineVar(name, value, environment);
        }
        
        public System.Threading.Tasks.Task DefineVarAsync(RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value, RDotNet.Server.SymbolicExpressionContext environment) {
            return base.Channel.DefineVarAsync(name, value, environment);
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetAttrib(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name) {
            return base.Channel.GetAttrib(sexp, name);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetAttribAsync(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name) {
            return base.Channel.GetAttribAsync(sexp, name);
        }
        
        public RDotNet.Server.SymbolicExpressionContext SetAttrib(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value) {
            return base.Channel.SetAttrib(sexp, name, value);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> SetAttribAsync(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value) {
            return base.Channel.SetAttribAsync(sexp, name, value);
        }
        
        public RDotNet.Server.SymbolicExpressionContext DoSlot(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name) {
            return base.Channel.DoSlot(sexp, name);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> DoSlotAsync(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name) {
            return base.Channel.DoSlotAsync(sexp, name);
        }
        
        public RDotNet.Server.SymbolicExpressionContext DoSlotAssign(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value) {
            return base.Channel.DoSlotAssign(sexp, name, value);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> DoSlotAssignAsync(RDotNet.Server.SymbolicExpressionContext sexp, RDotNet.Server.SymbolicExpressionContext name, RDotNet.Server.SymbolicExpressionContext value) {
            return base.Channel.DoSlotAssignAsync(sexp, name, value);
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetClassDefinition(string what) {
            return base.Channel.GetClassDefinition(what);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetClassDefinitionAsync(string what) {
            return base.Channel.GetClassDefinitionAsync(what);
        }
        
        public bool HasSlot(RDotNet.Server.SymbolicExpressionContext context, RDotNet.Server.SymbolicExpressionContext name) {
            return base.Channel.HasSlot(context, name);
        }
        
        public System.Threading.Tasks.Task<bool> HasSlotAsync(RDotNet.Server.SymbolicExpressionContext context, RDotNet.Server.SymbolicExpressionContext name) {
            return base.Channel.HasSlotAsync(context, name);
        }
        
        public bool IsEnvironment(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsEnvironment(context);
        }
        
        public System.Threading.Tasks.Task<bool> IsEnvironmentAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsEnvironmentAsync(context);
        }
        
        public bool IsExpression(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsExpression(context);
        }
        
        public System.Threading.Tasks.Task<bool> IsExpressionAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsExpressionAsync(context);
        }
        
        public bool IsSymbol(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsSymbol(context);
        }
        
        public System.Threading.Tasks.Task<bool> IsSymbolAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsSymbolAsync(context);
        }
        
        public bool IsLanguage(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsLanguage(context);
        }
        
        public System.Threading.Tasks.Task<bool> IsLanguageAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsLanguageAsync(context);
        }
        
        public bool IsFunction(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsFunction(context);
        }
        
        public System.Threading.Tasks.Task<bool> IsFunctionAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsFunctionAsync(context);
        }
        
        public bool IsFactor(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsFactor(context);
        }
        
        public System.Threading.Tasks.Task<bool> IsFactorAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsFactorAsync(context);
        }
        
        public bool IsOrdered(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsOrdered(context);
        }
        
        public System.Threading.Tasks.Task<bool> IsOrderedAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsOrderedAsync(context);
        }
        
        public RDotNet.Server.SymbolicExpressionContext LsInternal(RDotNet.Server.SymbolicExpressionContext context, bool all) {
            return base.Channel.LsInternal(context, all);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> LsInternalAsync(RDotNet.Server.SymbolicExpressionContext context, bool all) {
            return base.Channel.LsInternalAsync(context, all);
        }
        
        public RDotNet.Server.SymbolicExpressionContext ApplyClosure(RDotNet.Server.SymbolicExpressionContext call, RDotNet.Server.SymbolicExpressionContext value, RDotNet.Server.SymbolicExpressionContext arguments, RDotNet.Server.SymbolicExpressionContext environment, RDotNet.Server.SymbolicExpressionContext suppliedEnvironment) {
            return base.Channel.ApplyClosure(call, value, arguments, environment, suppliedEnvironment);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> ApplyClosureAsync(RDotNet.Server.SymbolicExpressionContext call, RDotNet.Server.SymbolicExpressionContext value, RDotNet.Server.SymbolicExpressionContext arguments, RDotNet.Server.SymbolicExpressionContext environment, RDotNet.Server.SymbolicExpressionContext suppliedEnvironment) {
            return base.Channel.ApplyClosureAsync(call, value, arguments, environment, suppliedEnvironment);
        }
        
        public RDotNet.Server.SymbolicExpressionContext VectorToPairList(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.VectorToPairList(context);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> VectorToPairListAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.VectorToPairListAsync(context);
        }
        
        public RDotNet.Server.SymbolicExpressionContext AllocateSEXP(RDotNet.R.Adapter.SymbolicExpressionType type) {
            return base.Channel.AllocateSEXP(type);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> AllocateSEXPAsync(RDotNet.R.Adapter.SymbolicExpressionType type) {
            return base.Channel.AllocateSEXPAsync(type);
        }
        
        public RDotNet.Server.SymbolicExpressionContext NewEnvironment(RDotNet.Server.SymbolicExpressionContext names, RDotNet.Server.SymbolicExpressionContext values, RDotNet.Server.SymbolicExpressionContext parent) {
            return base.Channel.NewEnvironment(names, values, parent);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> NewEnvironmentAsync(RDotNet.Server.SymbolicExpressionContext names, RDotNet.Server.SymbolicExpressionContext values, RDotNet.Server.SymbolicExpressionContext parent) {
            return base.Channel.NewEnvironmentAsync(names, values, parent);
        }
        
        public RDotNet.Server.SymbolicExpressionContext Cons(RDotNet.Server.SymbolicExpressionContext context, RDotNet.Server.SymbolicExpressionContext next) {
            return base.Channel.Cons(context, next);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> ConsAsync(RDotNet.Server.SymbolicExpressionContext context, RDotNet.Server.SymbolicExpressionContext next) {
            return base.Channel.ConsAsync(context, next);
        }
        
        public RDotNet.Server.SymbolicExpressionContext LCons(RDotNet.Server.SymbolicExpressionContext context, RDotNet.Server.SymbolicExpressionContext next) {
            return base.Channel.LCons(context, next);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> LConsAsync(RDotNet.Server.SymbolicExpressionContext context, RDotNet.Server.SymbolicExpressionContext next) {
            return base.Channel.LConsAsync(context, next);
        }
        
        public bool IsNil(RDotNet.Server.SymbolicExpressionContext attribute) {
            return base.Channel.IsNil(attribute);
        }
        
        public System.Threading.Tasks.Task<bool> IsNilAsync(RDotNet.Server.SymbolicExpressionContext attribute) {
            return base.Channel.IsNilAsync(attribute);
        }
        
        public bool IsNaString(RDotNet.Server.SymbolicExpressionContext rstring) {
            return base.Channel.IsNaString(rstring);
        }
        
        public System.Threading.Tasks.Task<bool> IsNaStringAsync(RDotNet.Server.SymbolicExpressionContext rstring) {
            return base.Channel.IsNaStringAsync(rstring);
        }
        
        public string GetParseError() {
            return base.Channel.GetParseError();
        }
        
        public System.Threading.Tasks.Task<string> GetParseErrorAsync() {
            return base.Channel.GetParseErrorAsync();
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetGlobalEnvironment() {
            return base.Channel.GetGlobalEnvironment();
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetGlobalEnvironmentAsync() {
            return base.Channel.GetGlobalEnvironmentAsync();
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetNames() {
            return base.Channel.GetNames();
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetNamesAsync() {
            return base.Channel.GetNamesAsync();
        }
        
        public System.Collections.Generic.List<string> GetCharacterVectorValues(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetCharacterVectorValues(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetCharacterVectorValuesAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetCharacterVectorValuesAsync(context);
        }
        
        public System.Collections.Generic.List<RDotNet.Server.SymbolicExpressionContext> GetExpressionVectorValues(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetExpressionVectorValues(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RDotNet.Server.SymbolicExpressionContext>> GetExpressionVectorValuesAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetExpressionVectorValuesAsync(context);
        }
        
        public System.Collections.Generic.List<int> GetIntegerVectorValues(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetIntegerVectorValues(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetIntegerVectorValuesAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetIntegerVectorValuesAsync(context);
        }
        
        public System.Collections.Generic.List<double> GetNumericVectorValues(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetNumericVectorValues(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<double>> GetNumericVectorValuesAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetNumericVectorValuesAsync(context);
        }
        
        public System.Collections.Generic.List<bool> GetLogicalVectorValues(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetLogicalVectorValues(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<bool>> GetLogicalVectorValuesAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetLogicalVectorValuesAsync(context);
        }
        
        public System.Collections.Generic.List<byte> GetRawVectorValues(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetRawVectorValues(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<byte>> GetRawVectorValuesAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetRawVectorValuesAsync(context);
        }
        
        public System.Collections.Generic.List<System.Numerics.Complex> GetComplexVectorValues(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetComplexVectorValues(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Numerics.Complex>> GetComplexVectorValuesAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetComplexVectorValuesAsync(context);
        }
        
        public string GetCharacterVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index) {
            return base.Channel.GetCharacterVectorValueAt(context, index);
        }
        
        public System.Threading.Tasks.Task<string> GetCharacterVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index) {
            return base.Channel.GetCharacterVectorValueAtAsync(context, index);
        }
        
        public void SetCharacterVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index, string value) {
            base.Channel.SetCharacterVectorValueAt(context, index, value);
        }
        
        public System.Threading.Tasks.Task SetCharacterVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index, string value) {
            return base.Channel.SetCharacterVectorValueAtAsync(context, index, value);
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetExpressionVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index) {
            return base.Channel.GetExpressionVectorValueAt(context, index);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetExpressionVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index) {
            return base.Channel.GetExpressionVectorValueAtAsync(context, index);
        }
        
        public void SetExpressionVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index, RDotNet.Server.SymbolicExpressionContext value) {
            base.Channel.SetExpressionVectorValueAt(context, index, value);
        }
        
        public System.Threading.Tasks.Task SetExpressionVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index, RDotNet.Server.SymbolicExpressionContext value) {
            return base.Channel.SetExpressionVectorValueAtAsync(context, index, value);
        }
        
        public int GetIntegerVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index) {
            return base.Channel.GetIntegerVectorValueAt(context, index);
        }
        
        public System.Threading.Tasks.Task<int> GetIntegerVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index) {
            return base.Channel.GetIntegerVectorValueAtAsync(context, index);
        }
        
        public void SetIntegerVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index, int value) {
            base.Channel.SetIntegerVectorValueAt(context, index, value);
        }
        
        public System.Threading.Tasks.Task SetIntegerVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index, int value) {
            return base.Channel.SetIntegerVectorValueAtAsync(context, index, value);
        }
        
        public double GetNumericVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index) {
            return base.Channel.GetNumericVectorValueAt(context, index);
        }
        
        public System.Threading.Tasks.Task<double> GetNumericVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index) {
            return base.Channel.GetNumericVectorValueAtAsync(context, index);
        }
        
        public void SetNumericVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index, double value) {
            base.Channel.SetNumericVectorValueAt(context, index, value);
        }
        
        public System.Threading.Tasks.Task SetNumericVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index, double value) {
            return base.Channel.SetNumericVectorValueAtAsync(context, index, value);
        }
        
        public bool GetLogicalVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index) {
            return base.Channel.GetLogicalVectorValueAt(context, index);
        }
        
        public System.Threading.Tasks.Task<bool> GetLogicalVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index) {
            return base.Channel.GetLogicalVectorValueAtAsync(context, index);
        }
        
        public void SetLogicalVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index, bool value) {
            base.Channel.SetLogicalVectorValueAt(context, index, value);
        }
        
        public System.Threading.Tasks.Task SetLogicalVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index, bool value) {
            return base.Channel.SetLogicalVectorValueAtAsync(context, index, value);
        }
        
        public byte GetRawVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index) {
            return base.Channel.GetRawVectorValueAt(context, index);
        }
        
        public System.Threading.Tasks.Task<byte> GetRawVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index) {
            return base.Channel.GetRawVectorValueAtAsync(context, index);
        }
        
        public void SetRawVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index, byte value) {
            base.Channel.SetRawVectorValueAt(context, index, value);
        }
        
        public System.Threading.Tasks.Task SetRawVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index, byte value) {
            return base.Channel.SetRawVectorValueAtAsync(context, index, value);
        }
        
        public System.Numerics.Complex GetComplexVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index) {
            return base.Channel.GetComplexVectorValueAt(context, index);
        }
        
        public System.Threading.Tasks.Task<System.Numerics.Complex> GetComplexVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index) {
            return base.Channel.GetComplexVectorValueAtAsync(context, index);
        }
        
        public void SetComplexVectorValueAt(RDotNet.Server.SymbolicExpressionContext context, int index, System.Numerics.Complex value) {
            base.Channel.SetComplexVectorValueAt(context, index, value);
        }
        
        public System.Threading.Tasks.Task SetComplexVectorValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int index, System.Numerics.Complex value) {
            return base.Channel.SetComplexVectorValueAtAsync(context, index, value);
        }
        
        public void InitializeCharacterVector(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<string> vector) {
            base.Channel.InitializeCharacterVector(context, vector);
        }
        
        public System.Threading.Tasks.Task InitializeCharacterVectorAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<string> vector) {
            return base.Channel.InitializeCharacterVectorAsync(context, vector);
        }
        
        public void InitializeIntegerVector(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<int> vector) {
            base.Channel.InitializeIntegerVector(context, vector);
        }
        
        public System.Threading.Tasks.Task InitializeIntegerVectorAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<int> vector) {
            return base.Channel.InitializeIntegerVectorAsync(context, vector);
        }
        
        public void InitializeNumericVector(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<double> vector) {
            base.Channel.InitializeNumericVector(context, vector);
        }
        
        public System.Threading.Tasks.Task InitializeNumericVectorAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<double> vector) {
            return base.Channel.InitializeNumericVectorAsync(context, vector);
        }
        
        public void InitializeLogicalVector(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<bool> vector) {
            base.Channel.InitializeLogicalVector(context, vector);
        }
        
        public System.Threading.Tasks.Task InitializeLogicalVectorAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<bool> vector) {
            return base.Channel.InitializeLogicalVectorAsync(context, vector);
        }
        
        public void InitializeRawVector(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<byte> vector) {
            base.Channel.InitializeRawVector(context, vector);
        }
        
        public System.Threading.Tasks.Task InitializeRawVectorAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<byte> vector) {
            return base.Channel.InitializeRawVectorAsync(context, vector);
        }
        
        public void InitializeComplexVector(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Numerics.Complex> vector) {
            base.Channel.InitializeComplexVector(context, vector);
        }
        
        public System.Threading.Tasks.Task InitializeComplexVectorAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Numerics.Complex> vector) {
            return base.Channel.InitializeComplexVectorAsync(context, vector);
        }
        
        public System.Collections.Generic.List<RDotNet.Server.SymbolicExpressionContext> GetSymbols(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetSymbols(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<RDotNet.Server.SymbolicExpressionContext>> GetSymbolsAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetSymbolsAsync(context);
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetUnboundValue() {
            return base.Channel.GetUnboundValue();
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetUnboundValueAsync() {
            return base.Channel.GetUnboundValueAsync();
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetNilValue() {
            return base.Channel.GetNilValue();
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetNilValueAsync() {
            return base.Channel.GetNilValueAsync();
        }
        
        public System.Collections.Generic.List<string> GetAttributeNames(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetAttributeNames(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAttributeNamesAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetAttributeNamesAsync(context);
        }
        
        public string GetPrintName(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetPrintName(context);
        }
        
        public System.Threading.Tasks.Task<string> GetPrintNameAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetPrintNameAsync(context);
        }
        
        public void SetPrintName(RDotNet.Server.SymbolicExpressionContext context, string value) {
            base.Channel.SetPrintName(context, value);
        }
        
        public System.Threading.Tasks.Task SetPrintNameAsync(RDotNet.Server.SymbolicExpressionContext context, string value) {
            return base.Channel.SetPrintNameAsync(context, value);
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetDimNames() {
            return base.Channel.GetDimNames();
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetDimNamesAsync() {
            return base.Channel.GetDimNamesAsync();
        }
        
        public bool IsPromise(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsPromise(context);
        }
        
        public System.Threading.Tasks.Task<bool> IsPromiseAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.IsPromiseAsync(context);
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetClosureBody(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetClosureBody(context);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetClosureBodyAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetClosureBodyAsync(context);
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetClosureFormals(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetClosureFormals(context);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetClosureFormalsAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetClosureFormalsAsync(context);
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetClosureEnvironment(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetClosureEnvironment(context);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetClosureEnvironmentAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetClosureEnvironmentAsync(context);
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetLanguageList(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetLanguageList(context);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetLanguageListAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetLanguageListAsync(context);
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetClass(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetClass(context);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetClassAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetClassAsync(context);
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetInternal(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetInternal(context);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetInternalAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetInternalAsync(context);
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetValue(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetValue(context);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetValueAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetValueAsync(context);
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetLevels(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetLevels(context);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetLevelsAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetLevelsAsync(context);
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.List<double>> GetNumericMatrixValues(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetNumericMatrixValues(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<double>>> GetNumericMatrixValuesAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetNumericMatrixValuesAsync(context);
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.List<int>> GetIntegerMatrixValues(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetIntegerMatrixValues(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<int>>> GetIntegerMatrixValuesAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetIntegerMatrixValuesAsync(context);
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.List<string>> GetCharacterMatrixValues(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetCharacterMatrixValues(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<string>>> GetCharacterMatrixValuesAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetCharacterMatrixValuesAsync(context);
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.List<bool>> GetLogicalMatrixValues(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetLogicalMatrixValues(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<bool>>> GetLogicalMatrixValuesAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetLogicalMatrixValuesAsync(context);
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.List<byte>> GetRawMatrixValues(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetRawMatrixValues(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<byte>>> GetRawMatrixValuesAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetRawMatrixValuesAsync(context);
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.List<System.Numerics.Complex>> GetComplexMatrixValues(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetComplexMatrixValues(context);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<System.Numerics.Complex>>> GetComplexMatrixValuesAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetComplexMatrixValuesAsync(context);
        }
        
        public string GetCharacterMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column) {
            return base.Channel.GetCharacterMatrixValueAt(context, row, column);
        }
        
        public System.Threading.Tasks.Task<string> GetCharacterMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column) {
            return base.Channel.GetCharacterMatrixValueAtAsync(context, row, column);
        }
        
        public void SetCharacterMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column, string value) {
            base.Channel.SetCharacterMatrixValueAt(context, row, column, value);
        }
        
        public System.Threading.Tasks.Task SetCharacterMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column, string value) {
            return base.Channel.SetCharacterMatrixValueAtAsync(context, row, column, value);
        }
        
        public int GetIntegerMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column) {
            return base.Channel.GetIntegerMatrixValueAt(context, row, column);
        }
        
        public System.Threading.Tasks.Task<int> GetIntegerMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column) {
            return base.Channel.GetIntegerMatrixValueAtAsync(context, row, column);
        }
        
        public void SetIntegerMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column, int value) {
            base.Channel.SetIntegerMatrixValueAt(context, row, column, value);
        }
        
        public System.Threading.Tasks.Task SetIntegerMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column, int value) {
            return base.Channel.SetIntegerMatrixValueAtAsync(context, row, column, value);
        }
        
        public double GetNumericMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column) {
            return base.Channel.GetNumericMatrixValueAt(context, row, column);
        }
        
        public System.Threading.Tasks.Task<double> GetNumericMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column) {
            return base.Channel.GetNumericMatrixValueAtAsync(context, row, column);
        }
        
        public void SetNumericMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column, double value) {
            base.Channel.SetNumericMatrixValueAt(context, row, column, value);
        }
        
        public System.Threading.Tasks.Task SetNumericMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column, double value) {
            return base.Channel.SetNumericMatrixValueAtAsync(context, row, column, value);
        }
        
        public bool GetLogicalMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column) {
            return base.Channel.GetLogicalMatrixValueAt(context, row, column);
        }
        
        public System.Threading.Tasks.Task<bool> GetLogicalMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column) {
            return base.Channel.GetLogicalMatrixValueAtAsync(context, row, column);
        }
        
        public void SetLogicalMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column, bool value) {
            base.Channel.SetLogicalMatrixValueAt(context, row, column, value);
        }
        
        public System.Threading.Tasks.Task SetLogicalMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column, bool value) {
            return base.Channel.SetLogicalMatrixValueAtAsync(context, row, column, value);
        }
        
        public byte GetRawMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column) {
            return base.Channel.GetRawMatrixValueAt(context, row, column);
        }
        
        public System.Threading.Tasks.Task<byte> GetRawMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column) {
            return base.Channel.GetRawMatrixValueAtAsync(context, row, column);
        }
        
        public void SetRawMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column, byte value) {
            base.Channel.SetRawMatrixValueAt(context, row, column, value);
        }
        
        public System.Threading.Tasks.Task SetRawMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column, byte value) {
            return base.Channel.SetRawMatrixValueAtAsync(context, row, column, value);
        }
        
        public System.Numerics.Complex GetComplexMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column) {
            return base.Channel.GetComplexMatrixValueAt(context, row, column);
        }
        
        public System.Threading.Tasks.Task<System.Numerics.Complex> GetComplexMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column) {
            return base.Channel.GetComplexMatrixValueAtAsync(context, row, column);
        }
        
        public void SetComplexMatrixValueAt(RDotNet.Server.SymbolicExpressionContext context, int row, int column, System.Numerics.Complex value) {
            base.Channel.SetComplexMatrixValueAt(context, row, column, value);
        }
        
        public System.Threading.Tasks.Task SetComplexMatrixValueAtAsync(RDotNet.Server.SymbolicExpressionContext context, int row, int column, System.Numerics.Complex value) {
            return base.Channel.SetComplexMatrixValueAtAsync(context, row, column, value);
        }
        
        public void InitializeCharacterMatrix(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<string>> matrix) {
            base.Channel.InitializeCharacterMatrix(context, matrix);
        }
        
        public System.Threading.Tasks.Task InitializeCharacterMatrixAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<string>> matrix) {
            return base.Channel.InitializeCharacterMatrixAsync(context, matrix);
        }
        
        public void InitializeIntegerMatrix(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<int>> matrix) {
            base.Channel.InitializeIntegerMatrix(context, matrix);
        }
        
        public System.Threading.Tasks.Task InitializeIntegerMatrixAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<int>> matrix) {
            return base.Channel.InitializeIntegerMatrixAsync(context, matrix);
        }
        
        public void InitializeNumericMatrix(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<double>> matrix) {
            base.Channel.InitializeNumericMatrix(context, matrix);
        }
        
        public System.Threading.Tasks.Task InitializeNumericMatrixAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<double>> matrix) {
            return base.Channel.InitializeNumericMatrixAsync(context, matrix);
        }
        
        public void InitializeLogicalMatrix(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<bool>> matrix) {
            base.Channel.InitializeLogicalMatrix(context, matrix);
        }
        
        public System.Threading.Tasks.Task InitializeLogicalMatrixAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<bool>> matrix) {
            return base.Channel.InitializeLogicalMatrixAsync(context, matrix);
        }
        
        public void InitializeRawMatrix(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<byte>> matrix) {
            base.Channel.InitializeRawMatrix(context, matrix);
        }
        
        public System.Threading.Tasks.Task InitializeRawMatrixAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<byte>> matrix) {
            return base.Channel.InitializeRawMatrixAsync(context, matrix);
        }
        
        public void InitializeComplexMatrix(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<System.Numerics.Complex>> matrix) {
            base.Channel.InitializeComplexMatrix(context, matrix);
        }
        
        public System.Threading.Tasks.Task InitializeComplexMatrixAsync(RDotNet.Server.SymbolicExpressionContext context, System.Collections.Generic.List<System.Collections.Generic.List<System.Numerics.Complex>> matrix) {
            return base.Channel.InitializeComplexMatrixAsync(context, matrix);
        }
        
        public RDotNet.Server.SymbolicExpressionContext GetParentEnvironment(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetParentEnvironment(context);
        }
        
        public System.Threading.Tasks.Task<RDotNet.Server.SymbolicExpressionContext> GetParentEnvironmentAsync(RDotNet.Server.SymbolicExpressionContext context) {
            return base.Channel.GetParentEnvironmentAsync(context);
        }
    }
}

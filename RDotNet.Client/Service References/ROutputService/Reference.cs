//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RDotNet.Client.ROutputService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ROutputService.IROutputService")]
    public interface IROutputService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IROutputService/ClearAll", ReplyAction="http://tempuri.org/IROutputService/ClearAllResponse")]
        void ClearAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IROutputService/ClearAll", ReplyAction="http://tempuri.org/IROutputService/ClearAllResponse")]
        System.Threading.Tasks.Task ClearAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IROutputService/ClearPlots", ReplyAction="http://tempuri.org/IROutputService/ClearPlotsResponse")]
        void ClearPlots();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IROutputService/ClearPlots", ReplyAction="http://tempuri.org/IROutputService/ClearPlotsResponse")]
        System.Threading.Tasks.Task ClearPlotsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IROutputService/ClearText", ReplyAction="http://tempuri.org/IROutputService/ClearTextResponse")]
        void ClearText();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IROutputService/ClearText", ReplyAction="http://tempuri.org/IROutputService/ClearTextResponse")]
        System.Threading.Tasks.Task ClearTextAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IROutputService/GetPendingPlotCount", ReplyAction="http://tempuri.org/IROutputService/GetPendingPlotCountResponse")]
        int GetPendingPlotCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IROutputService/GetPendingPlotCount", ReplyAction="http://tempuri.org/IROutputService/GetPendingPlotCountResponse")]
        System.Threading.Tasks.Task<int> GetPendingPlotCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IROutputService/GetAllPlots", ReplyAction="http://tempuri.org/IROutputService/GetAllPlotsResponse")]
        System.Collections.Generic.List<string> GetAllPlots();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IROutputService/GetAllPlots", ReplyAction="http://tempuri.org/IROutputService/GetAllPlotsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllPlotsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IROutputService/GetText", ReplyAction="http://tempuri.org/IROutputService/GetTextResponse")]
        System.Collections.Generic.List<string> GetText();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IROutputService/GetText", ReplyAction="http://tempuri.org/IROutputService/GetTextResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetTextAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IROutputServiceChannel : global::RDotNet.Client.ROutputService.IROutputService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ROutputServiceClient : System.ServiceModel.ClientBase<global::RDotNet.Client.ROutputService.IROutputService>, global::RDotNet.Client.ROutputService.IROutputService {
        
        public ROutputServiceClient() {
        }
        
        public ROutputServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ROutputServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ROutputServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ROutputServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ClearAll() {
            base.Channel.ClearAll();
        }
        
        public System.Threading.Tasks.Task ClearAllAsync() {
            return base.Channel.ClearAllAsync();
        }
        
        public void ClearPlots() {
            base.Channel.ClearPlots();
        }
        
        public System.Threading.Tasks.Task ClearPlotsAsync() {
            return base.Channel.ClearPlotsAsync();
        }
        
        public void ClearText() {
            base.Channel.ClearText();
        }
        
        public System.Threading.Tasks.Task ClearTextAsync() {
            return base.Channel.ClearTextAsync();
        }
        
        public int GetPendingPlotCount() {
            return base.Channel.GetPendingPlotCount();
        }
        
        public System.Threading.Tasks.Task<int> GetPendingPlotCountAsync() {
            return base.Channel.GetPendingPlotCountAsync();
        }
        
        public System.Collections.Generic.List<string> GetAllPlots() {
            return base.Channel.GetAllPlots();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllPlotsAsync() {
            return base.Channel.GetAllPlotsAsync();
        }
        
        public System.Collections.Generic.List<string> GetText() {
            return base.Channel.GetText();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetTextAsync() {
            return base.Channel.GetTextAsync();
        }
    }
}

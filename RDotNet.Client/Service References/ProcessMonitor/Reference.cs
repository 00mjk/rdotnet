//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RDotNet.Client.ProcessMonitor {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceState", Namespace="http://schemas.datacontract.org/2004/07/RDotNet.ProcessHost")]
    public enum ServiceState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Faulted = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Initializing = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ready = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Terminating = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Closed = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProcessMonitor.IProcessMonitor")]
    public interface IProcessMonitor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessMonitor/get_Id", ReplyAction="http://tempuri.org/IProcessMonitor/get_IdResponse")]
        int get_Id();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessMonitor/get_Id", ReplyAction="http://tempuri.org/IProcessMonitor/get_IdResponse")]
        System.Threading.Tasks.Task<int> get_IdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessMonitor/IsAlive", ReplyAction="http://tempuri.org/IProcessMonitor/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessMonitor/IsAlive", ReplyAction="http://tempuri.org/IProcessMonitor/IsAliveResponse")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessMonitor/get_State", ReplyAction="http://tempuri.org/IProcessMonitor/get_StateResponse")]
        RDotNet.Client.ProcessMonitor.ServiceState get_State();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessMonitor/get_State", ReplyAction="http://tempuri.org/IProcessMonitor/get_StateResponse")]
        System.Threading.Tasks.Task<RDotNet.Client.ProcessMonitor.ServiceState> get_StateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessMonitor/Kill", ReplyAction="http://tempuri.org/IProcessMonitor/KillResponse")]
        void Kill();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessMonitor/Kill", ReplyAction="http://tempuri.org/IProcessMonitor/KillResponse")]
        System.Threading.Tasks.Task KillAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProcessMonitorChannel : global::RDotNet.Client.ProcessMonitor.IProcessMonitor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProcessMonitorClient : System.ServiceModel.ClientBase<global::RDotNet.Client.ProcessMonitor.IProcessMonitor>, global::RDotNet.Client.ProcessMonitor.IProcessMonitor {
        
        public ProcessMonitorClient() {
        }
        
        public ProcessMonitorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProcessMonitorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProcessMonitorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProcessMonitorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int get_Id() {
            return base.Channel.get_Id();
        }
        
        public System.Threading.Tasks.Task<int> get_IdAsync() {
            return base.Channel.get_IdAsync();
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
        
        public RDotNet.Client.ProcessMonitor.ServiceState get_State() {
            return base.Channel.get_State();
        }
        
        public System.Threading.Tasks.Task<RDotNet.Client.ProcessMonitor.ServiceState> get_StateAsync() {
            return base.Channel.get_StateAsync();
        }
        
        public void Kill() {
            base.Channel.Kill();
        }
        
        public System.Threading.Tasks.Task KillAsync() {
            return base.Channel.KillAsync();
        }
    }
}
